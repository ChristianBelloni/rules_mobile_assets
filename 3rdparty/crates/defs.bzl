###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run @@//3rdparty:crates_vendor
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependencies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({
            tuple(_CONDITIONS[condition]): deps.values(),
            "//conditions:default": [],
        })

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": dict(common_items)}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        for triple in condition_triples:
            if triple in crate_aliases:
                crate_aliases[triple].update(deps)
            else:
                crate_aliases.update({triple: dict(deps.items() + common_items)})

    return select(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "tools/resizer": {
        _COMMON_CONDITION: {
            "clap": Label("@id__clap-4.5.17//:clap"),
            "resvg": Label("@id__resvg-0.43.0//:resvg"),
        },
    },
}

_NORMAL_ALIASES = {
    "tools/resizer": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "tools/resizer": {
    },
}

_NORMAL_DEV_ALIASES = {
    "tools/resizer": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "tools/resizer": {
    },
}

_PROC_MACRO_ALIASES = {
    "tools/resizer": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "tools/resizer": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "tools/resizer": {
    },
}

_BUILD_DEPENDENCIES = {
    "tools/resizer": {
    },
}

_BUILD_ALIASES = {
    "tools/resizer": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "tools/resizer": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "tools/resizer": {
    },
}

_CONDITIONS = {
    "aarch64-apple-darwin": ["@rules_rust//rust/platform:aarch64-apple-darwin"],
    "aarch64-apple-ios": ["@rules_rust//rust/platform:aarch64-apple-ios"],
    "aarch64-apple-ios-sim": ["@rules_rust//rust/platform:aarch64-apple-ios-sim"],
    "aarch64-fuchsia": ["@rules_rust//rust/platform:aarch64-fuchsia"],
    "aarch64-linux-android": ["@rules_rust//rust/platform:aarch64-linux-android"],
    "aarch64-pc-windows-gnullvm": [],
    "aarch64-pc-windows-msvc": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc"],
    "aarch64-unknown-linux-gnu": ["@rules_rust//rust/platform:aarch64-unknown-linux-gnu", "@rules_rust//rust/platform:aarch64-unknown-nixos-gnu"],
    "aarch64-unknown-nixos-gnu": ["@rules_rust//rust/platform:aarch64-unknown-nixos-gnu"],
    "aarch64-unknown-nto-qnx710": ["@rules_rust//rust/platform:aarch64-unknown-nto-qnx710"],
    "arm-unknown-linux-gnueabi": ["@rules_rust//rust/platform:arm-unknown-linux-gnueabi"],
    "armv7-linux-androideabi": ["@rules_rust//rust/platform:armv7-linux-androideabi"],
    "armv7-unknown-linux-gnueabi": ["@rules_rust//rust/platform:armv7-unknown-linux-gnueabi"],
    "cfg(all(any(target_arch = \"x86_64\", target_arch = \"arm64ec\"), target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "cfg(all(target_arch = \"aarch64\", target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc"],
    "cfg(all(target_arch = \"x86\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": ["@rules_rust//rust/platform:i686-unknown-linux-gnu"],
    "cfg(all(target_arch = \"x86\", target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:i686-pc-windows-msvc"],
    "cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": ["@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "cfg(unix)": ["@rules_rust//rust/platform:aarch64-apple-darwin", "@rules_rust//rust/platform:aarch64-apple-ios", "@rules_rust//rust/platform:aarch64-apple-ios-sim", "@rules_rust//rust/platform:aarch64-fuchsia", "@rules_rust//rust/platform:aarch64-linux-android", "@rules_rust//rust/platform:aarch64-unknown-linux-gnu", "@rules_rust//rust/platform:aarch64-unknown-nixos-gnu", "@rules_rust//rust/platform:aarch64-unknown-nto-qnx710", "@rules_rust//rust/platform:arm-unknown-linux-gnueabi", "@rules_rust//rust/platform:armv7-linux-androideabi", "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi", "@rules_rust//rust/platform:i686-apple-darwin", "@rules_rust//rust/platform:i686-linux-android", "@rules_rust//rust/platform:i686-unknown-freebsd", "@rules_rust//rust/platform:i686-unknown-linux-gnu", "@rules_rust//rust/platform:powerpc-unknown-linux-gnu", "@rules_rust//rust/platform:s390x-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-apple-darwin", "@rules_rust//rust/platform:x86_64-apple-ios", "@rules_rust//rust/platform:x86_64-fuchsia", "@rules_rust//rust/platform:x86_64-linux-android", "@rules_rust//rust/platform:x86_64-unknown-freebsd", "@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "cfg(windows)": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc", "@rules_rust//rust/platform:i686-pc-windows-msvc", "@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "i686-apple-darwin": ["@rules_rust//rust/platform:i686-apple-darwin"],
    "i686-linux-android": ["@rules_rust//rust/platform:i686-linux-android"],
    "i686-pc-windows-gnullvm": [],
    "i686-pc-windows-msvc": ["@rules_rust//rust/platform:i686-pc-windows-msvc"],
    "i686-unknown-freebsd": ["@rules_rust//rust/platform:i686-unknown-freebsd"],
    "i686-unknown-linux-gnu": ["@rules_rust//rust/platform:i686-unknown-linux-gnu"],
    "powerpc-unknown-linux-gnu": ["@rules_rust//rust/platform:powerpc-unknown-linux-gnu"],
    "riscv32imc-unknown-none-elf": ["@rules_rust//rust/platform:riscv32imc-unknown-none-elf"],
    "riscv64gc-unknown-none-elf": ["@rules_rust//rust/platform:riscv64gc-unknown-none-elf"],
    "s390x-unknown-linux-gnu": ["@rules_rust//rust/platform:s390x-unknown-linux-gnu"],
    "thumbv7em-none-eabi": ["@rules_rust//rust/platform:thumbv7em-none-eabi"],
    "thumbv8m.main-none-eabi": ["@rules_rust//rust/platform:thumbv8m.main-none-eabi"],
    "wasm32-unknown-unknown": ["@rules_rust//rust/platform:wasm32-unknown-unknown"],
    "wasm32-wasi": ["@rules_rust//rust/platform:wasm32-wasi"],
    "x86_64-apple-darwin": ["@rules_rust//rust/platform:x86_64-apple-darwin"],
    "x86_64-apple-ios": ["@rules_rust//rust/platform:x86_64-apple-ios"],
    "x86_64-fuchsia": ["@rules_rust//rust/platform:x86_64-fuchsia"],
    "x86_64-linux-android": ["@rules_rust//rust/platform:x86_64-linux-android"],
    "x86_64-pc-windows-gnullvm": [],
    "x86_64-pc-windows-msvc": ["@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "x86_64-unknown-freebsd": ["@rules_rust//rust/platform:x86_64-unknown-freebsd"],
    "x86_64-unknown-linux-gnu": ["@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "x86_64-unknown-nixos-gnu": ["@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "x86_64-unknown-none": ["@rules_rust//rust/platform:x86_64-unknown-none"],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates.

    Returns:
      A list of repos visible to the module through the module extension.
    """
    maybe(
        http_archive,
        name = "id__adler-1.0.2",
        sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/adler/1.0.2/download"],
        strip_prefix = "adler-1.0.2",
        build_file = Label("//3rdparty/crates:BUILD.adler-1.0.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__adler2-2.0.0",
        sha256 = "512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/adler2/2.0.0/download"],
        strip_prefix = "adler2-2.0.0",
        build_file = Label("//3rdparty/crates:BUILD.adler2-2.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstream-0.6.15",
        sha256 = "64e15c1ab1f89faffbf04a634d5e1962e9074f2741eef6d97f3c4e322426d526",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstream/0.6.15/download"],
        strip_prefix = "anstream-0.6.15",
        build_file = Label("//3rdparty/crates:BUILD.anstream-0.6.15.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstyle-1.0.8",
        sha256 = "1bec1de6f59aedf83baf9ff929c98f2ad654b97c9510f4e70cf6f661d49fd5b1",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle/1.0.8/download"],
        strip_prefix = "anstyle-1.0.8",
        build_file = Label("//3rdparty/crates:BUILD.anstyle-1.0.8.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstyle-parse-0.2.5",
        sha256 = "eb47de1e80c2b463c735db5b217a0ddc39d612e7ac9e2e96a5aed1f57616c1cb",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-parse/0.2.5/download"],
        strip_prefix = "anstyle-parse-0.2.5",
        build_file = Label("//3rdparty/crates:BUILD.anstyle-parse-0.2.5.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstyle-query-1.1.1",
        sha256 = "6d36fc52c7f6c869915e99412912f22093507da8d9e942ceaf66fe4b7c14422a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-query/1.1.1/download"],
        strip_prefix = "anstyle-query-1.1.1",
        build_file = Label("//3rdparty/crates:BUILD.anstyle-query-1.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstyle-wincon-3.0.4",
        sha256 = "5bf74e1b6e971609db8ca7a9ce79fd5768ab6ae46441c572e46cf596f59e57f8",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-wincon/3.0.4/download"],
        strip_prefix = "anstyle-wincon-3.0.4",
        build_file = Label("//3rdparty/crates:BUILD.anstyle-wincon-3.0.4.bazel"),
    )

    maybe(
        http_archive,
        name = "id__arrayref-0.3.9",
        sha256 = "76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/arrayref/0.3.9/download"],
        strip_prefix = "arrayref-0.3.9",
        build_file = Label("//3rdparty/crates:BUILD.arrayref-0.3.9.bazel"),
    )

    maybe(
        http_archive,
        name = "id__arrayvec-0.7.6",
        sha256 = "7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/arrayvec/0.7.6/download"],
        strip_prefix = "arrayvec-0.7.6",
        build_file = Label("//3rdparty/crates:BUILD.arrayvec-0.7.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__base64-0.22.1",
        sha256 = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/base64/0.22.1/download"],
        strip_prefix = "base64-0.22.1",
        build_file = Label("//3rdparty/crates:BUILD.base64-0.22.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__bitflags-1.3.2",
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/bitflags/1.3.2/download"],
        strip_prefix = "bitflags-1.3.2",
        build_file = Label("//3rdparty/crates:BUILD.bitflags-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__bitflags-2.6.0",
        sha256 = "b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/bitflags/2.6.0/download"],
        strip_prefix = "bitflags-2.6.0",
        build_file = Label("//3rdparty/crates:BUILD.bitflags-2.6.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__bytemuck-1.18.0",
        sha256 = "94bbb0ad554ad961ddc5da507a12a29b14e4ae5bda06b19f575a3e6079d2e2ae",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/bytemuck/1.18.0/download"],
        strip_prefix = "bytemuck-1.18.0",
        build_file = Label("//3rdparty/crates:BUILD.bytemuck-1.18.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__byteorder-lite-0.1.0",
        sha256 = "8f1fe948ff07f4bd06c30984e69f5b4899c516a3ef74f34df92a2df2ab535495",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/byteorder-lite/0.1.0/download"],
        strip_prefix = "byteorder-lite-0.1.0",
        build_file = Label("//3rdparty/crates:BUILD.byteorder-lite-0.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__cfg-if-1.0.0",
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/cfg-if/1.0.0/download"],
        strip_prefix = "cfg-if-1.0.0",
        build_file = Label("//3rdparty/crates:BUILD.cfg-if-1.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__clap-4.5.17",
        sha256 = "3e5a21b8495e732f1b3c364c9949b201ca7bae518c502c80256c96ad79eaf6ac",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap/4.5.17/download"],
        strip_prefix = "clap-4.5.17",
        build_file = Label("//3rdparty/crates:BUILD.clap-4.5.17.bazel"),
    )

    maybe(
        http_archive,
        name = "id__clap_builder-4.5.17",
        sha256 = "8cf2dd12af7a047ad9d6da2b6b249759a22a7abc0f474c1dae1777afa4b21a73",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_builder/4.5.17/download"],
        strip_prefix = "clap_builder-4.5.17",
        build_file = Label("//3rdparty/crates:BUILD.clap_builder-4.5.17.bazel"),
    )

    maybe(
        http_archive,
        name = "id__clap_derive-4.5.13",
        sha256 = "501d359d5f3dcaf6ecdeee48833ae73ec6e42723a1e52419c79abf9507eec0a0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_derive/4.5.13/download"],
        strip_prefix = "clap_derive-4.5.13",
        build_file = Label("//3rdparty/crates:BUILD.clap_derive-4.5.13.bazel"),
    )

    maybe(
        http_archive,
        name = "id__clap_lex-0.7.2",
        sha256 = "1462739cb27611015575c0c11df5df7601141071f07518d56fcc1be504cbec97",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_lex/0.7.2/download"],
        strip_prefix = "clap_lex-0.7.2",
        build_file = Label("//3rdparty/crates:BUILD.clap_lex-0.7.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__color_quant-1.1.0",
        sha256 = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/color_quant/1.1.0/download"],
        strip_prefix = "color_quant-1.1.0",
        build_file = Label("//3rdparty/crates:BUILD.color_quant-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__colorchoice-1.0.2",
        sha256 = "d3fd119d74b830634cea2a0f58bbd0d54540518a14397557951e79340abc28c0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/colorchoice/1.0.2/download"],
        strip_prefix = "colorchoice-1.0.2",
        build_file = Label("//3rdparty/crates:BUILD.colorchoice-1.0.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__core_maths-0.1.0",
        sha256 = "e3b02505ccb8c50b0aa21ace0fc08c3e53adebd4e58caa18a36152803c7709a3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/core_maths/0.1.0/download"],
        strip_prefix = "core_maths-0.1.0",
        build_file = Label("//3rdparty/crates:BUILD.core_maths-0.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__crc32fast-1.4.2",
        sha256 = "a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/crc32fast/1.4.2/download"],
        strip_prefix = "crc32fast-1.4.2",
        build_file = Label("//3rdparty/crates:BUILD.crc32fast-1.4.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__data-url-0.3.1",
        sha256 = "5c297a1c74b71ae29df00c3e22dd9534821d60eb9af5a0192823fa2acea70c2a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/data-url/0.3.1/download"],
        strip_prefix = "data-url-0.3.1",
        build_file = Label("//3rdparty/crates:BUILD.data-url-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__fdeflate-0.3.4",
        sha256 = "4f9bfee30e4dedf0ab8b422f03af778d9612b63f502710fc500a334ebe2de645",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/fdeflate/0.3.4/download"],
        strip_prefix = "fdeflate-0.3.4",
        build_file = Label("//3rdparty/crates:BUILD.fdeflate-0.3.4.bazel"),
    )

    maybe(
        http_archive,
        name = "id__flate2-1.0.33",
        sha256 = "324a1be68054ef05ad64b861cc9eaf1d623d2d8cb25b4bf2cb9cdd902b4bf253",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/flate2/1.0.33/download"],
        strip_prefix = "flate2-1.0.33",
        build_file = Label("//3rdparty/crates:BUILD.flate2-1.0.33.bazel"),
    )

    maybe(
        http_archive,
        name = "id__float-cmp-0.9.0",
        sha256 = "98de4bbd547a563b716d8dfa9aad1cb19bfab00f4fa09a6a4ed21dbcf44ce9c4",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/float-cmp/0.9.0/download"],
        strip_prefix = "float-cmp-0.9.0",
        build_file = Label("//3rdparty/crates:BUILD.float-cmp-0.9.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__fontconfig-parser-0.5.7",
        sha256 = "c1fcfcd44ca6e90c921fee9fa665d530b21ef1327a4c1a6c5250ea44b776ada7",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/fontconfig-parser/0.5.7/download"],
        strip_prefix = "fontconfig-parser-0.5.7",
        build_file = Label("//3rdparty/crates:BUILD.fontconfig-parser-0.5.7.bazel"),
    )

    maybe(
        http_archive,
        name = "id__fontdb-0.21.0",
        sha256 = "37be9fc20d966be438cd57a45767f73349477fb0f85ce86e000557f787298afb",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/fontdb/0.21.0/download"],
        strip_prefix = "fontdb-0.21.0",
        build_file = Label("//3rdparty/crates:BUILD.fontdb-0.21.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__gif-0.13.1",
        sha256 = "3fb2d69b19215e18bb912fa30f7ce15846e301408695e44e0ef719f1da9e19f2",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/gif/0.13.1/download"],
        strip_prefix = "gif-0.13.1",
        build_file = Label("//3rdparty/crates:BUILD.gif-0.13.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__heck-0.5.0",
        sha256 = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/heck/0.5.0/download"],
        strip_prefix = "heck-0.5.0",
        build_file = Label("//3rdparty/crates:BUILD.heck-0.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__image-webp-0.1.3",
        sha256 = "f79afb8cbee2ef20f59ccd477a218c12a93943d075b492015ecb1bb81f8ee904",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/image-webp/0.1.3/download"],
        strip_prefix = "image-webp-0.1.3",
        build_file = Label("//3rdparty/crates:BUILD.image-webp-0.1.3.bazel"),
    )

    maybe(
        http_archive,
        name = "id__imagesize-0.13.0",
        sha256 = "edcd27d72f2f071c64249075f42e205ff93c9a4c5f6c6da53e79ed9f9832c285",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/imagesize/0.13.0/download"],
        strip_prefix = "imagesize-0.13.0",
        build_file = Label("//3rdparty/crates:BUILD.imagesize-0.13.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__is_terminal_polyfill-1.70.1",
        sha256 = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/is_terminal_polyfill/1.70.1/download"],
        strip_prefix = "is_terminal_polyfill-1.70.1",
        build_file = Label("//3rdparty/crates:BUILD.is_terminal_polyfill-1.70.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__kurbo-0.11.1",
        sha256 = "89234b2cc610a7dd927ebde6b41dd1a5d4214cffaef4cf1fb2195d592f92518f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/kurbo/0.11.1/download"],
        strip_prefix = "kurbo-0.11.1",
        build_file = Label("//3rdparty/crates:BUILD.kurbo-0.11.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__libc-0.2.158",
        sha256 = "d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/libc/0.2.158/download"],
        strip_prefix = "libc-0.2.158",
        build_file = Label("//3rdparty/crates:BUILD.libc-0.2.158.bazel"),
    )

    maybe(
        http_archive,
        name = "id__libm-0.2.8",
        sha256 = "4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/libm/0.2.8/download"],
        strip_prefix = "libm-0.2.8",
        build_file = Label("//3rdparty/crates:BUILD.libm-0.2.8.bazel"),
    )

    maybe(
        http_archive,
        name = "id__log-0.4.22",
        sha256 = "a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/log/0.4.22/download"],
        strip_prefix = "log-0.4.22",
        build_file = Label("//3rdparty/crates:BUILD.log-0.4.22.bazel"),
    )

    maybe(
        http_archive,
        name = "id__memmap2-0.9.5",
        sha256 = "fd3f7eed9d3848f8b98834af67102b720745c4ec028fcd0aa0239277e7de374f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/memmap2/0.9.5/download"],
        strip_prefix = "memmap2-0.9.5",
        build_file = Label("//3rdparty/crates:BUILD.memmap2-0.9.5.bazel"),
    )

    maybe(
        http_archive,
        name = "id__miniz_oxide-0.7.4",
        sha256 = "b8a240ddb74feaf34a79a7add65a741f3167852fba007066dcac1ca548d89c08",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/miniz_oxide/0.7.4/download"],
        strip_prefix = "miniz_oxide-0.7.4",
        build_file = Label("//3rdparty/crates:BUILD.miniz_oxide-0.7.4.bazel"),
    )

    maybe(
        http_archive,
        name = "id__miniz_oxide-0.8.0",
        sha256 = "e2d80299ef12ff69b16a84bb182e3b9df68b5a91574d3d4fa6e41b65deec4df1",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/miniz_oxide/0.8.0/download"],
        strip_prefix = "miniz_oxide-0.8.0",
        build_file = Label("//3rdparty/crates:BUILD.miniz_oxide-0.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__pico-args-0.5.0",
        sha256 = "5be167a7af36ee22fe3115051bc51f6e6c7054c9348e28deb4f49bd6f705a315",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/pico-args/0.5.0/download"],
        strip_prefix = "pico-args-0.5.0",
        build_file = Label("//3rdparty/crates:BUILD.pico-args-0.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__png-0.17.13",
        sha256 = "06e4b0d3d1312775e782c86c91a111aa1f910cbb65e1337f9975b5f9a554b5e1",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/png/0.17.13/download"],
        strip_prefix = "png-0.17.13",
        build_file = Label("//3rdparty/crates:BUILD.png-0.17.13.bazel"),
    )

    maybe(
        http_archive,
        name = "id__proc-macro2-1.0.86",
        sha256 = "5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/proc-macro2/1.0.86/download"],
        strip_prefix = "proc-macro2-1.0.86",
        build_file = Label("//3rdparty/crates:BUILD.proc-macro2-1.0.86.bazel"),
    )

    maybe(
        http_archive,
        name = "id__quick-error-2.0.1",
        sha256 = "a993555f31e5a609f617c12db6250dedcac1b0a85076912c436e6fc9b2c8e6a3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/quick-error/2.0.1/download"],
        strip_prefix = "quick-error-2.0.1",
        build_file = Label("//3rdparty/crates:BUILD.quick-error-2.0.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__quote-1.0.37",
        sha256 = "b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/quote/1.0.37/download"],
        strip_prefix = "quote-1.0.37",
        build_file = Label("//3rdparty/crates:BUILD.quote-1.0.37.bazel"),
    )

    maybe(
        http_archive,
        name = "id__resvg-0.43.0",
        sha256 = "c7314563c59c7ce31c18e23ad3dd092c37b928a0fa4e1c0a1a6504351ab411d1",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/resvg/0.43.0/download"],
        strip_prefix = "resvg-0.43.0",
        build_file = Label("//3rdparty/crates:BUILD.resvg-0.43.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__rgb-0.8.50",
        sha256 = "57397d16646700483b67d2dd6511d79318f9d057fdbd21a4066aeac8b41d310a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/rgb/0.8.50/download"],
        strip_prefix = "rgb-0.8.50",
        build_file = Label("//3rdparty/crates:BUILD.rgb-0.8.50.bazel"),
    )

    maybe(
        http_archive,
        name = "id__roxmltree-0.20.0",
        sha256 = "6c20b6793b5c2fa6553b250154b78d6d0db37e72700ae35fad9387a46f487c97",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/roxmltree/0.20.0/download"],
        strip_prefix = "roxmltree-0.20.0",
        build_file = Label("//3rdparty/crates:BUILD.roxmltree-0.20.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__rustybuzz-0.18.0",
        sha256 = "c85d1ccd519e61834798eb52c4e886e8c2d7d698dd3d6ce0b1b47eb8557f1181",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/rustybuzz/0.18.0/download"],
        strip_prefix = "rustybuzz-0.18.0",
        build_file = Label("//3rdparty/crates:BUILD.rustybuzz-0.18.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__simd-adler32-0.3.7",
        sha256 = "d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/simd-adler32/0.3.7/download"],
        strip_prefix = "simd-adler32-0.3.7",
        build_file = Label("//3rdparty/crates:BUILD.simd-adler32-0.3.7.bazel"),
    )

    maybe(
        http_archive,
        name = "id__simplecss-0.2.1",
        sha256 = "a11be7c62927d9427e9f40f3444d5499d868648e2edbc4e2116de69e7ec0e89d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/simplecss/0.2.1/download"],
        strip_prefix = "simplecss-0.2.1",
        build_file = Label("//3rdparty/crates:BUILD.simplecss-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__siphasher-1.0.1",
        sha256 = "56199f7ddabf13fe5074ce809e7d3f42b42ae711800501b5b16ea82ad029c39d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/siphasher/1.0.1/download"],
        strip_prefix = "siphasher-1.0.1",
        build_file = Label("//3rdparty/crates:BUILD.siphasher-1.0.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__slotmap-1.0.7",
        sha256 = "dbff4acf519f630b3a3ddcfaea6c06b42174d9a44bc70c620e9ed1649d58b82a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/slotmap/1.0.7/download"],
        strip_prefix = "slotmap-1.0.7",
        build_file = Label("//3rdparty/crates:BUILD.slotmap-1.0.7.bazel"),
    )

    maybe(
        http_archive,
        name = "id__smallvec-1.13.2",
        sha256 = "3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/smallvec/1.13.2/download"],
        strip_prefix = "smallvec-1.13.2",
        build_file = Label("//3rdparty/crates:BUILD.smallvec-1.13.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__strict-num-0.1.1",
        sha256 = "6637bab7722d379c8b41ba849228d680cc12d0a45ba1fa2b48f2a30577a06731",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/strict-num/0.1.1/download"],
        strip_prefix = "strict-num-0.1.1",
        build_file = Label("//3rdparty/crates:BUILD.strict-num-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__strsim-0.11.1",
        sha256 = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/strsim/0.11.1/download"],
        strip_prefix = "strsim-0.11.1",
        build_file = Label("//3rdparty/crates:BUILD.strsim-0.11.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__svgtypes-0.15.2",
        sha256 = "794de53cc48eaabeed0ab6a3404a65f40b3e38c067e4435883a65d2aa4ca000e",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/svgtypes/0.15.2/download"],
        strip_prefix = "svgtypes-0.15.2",
        build_file = Label("//3rdparty/crates:BUILD.svgtypes-0.15.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__syn-2.0.77",
        sha256 = "9f35bcdf61fd8e7be6caf75f429fdca8beb3ed76584befb503b1569faee373ed",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/syn/2.0.77/download"],
        strip_prefix = "syn-2.0.77",
        build_file = Label("//3rdparty/crates:BUILD.syn-2.0.77.bazel"),
    )

    maybe(
        http_archive,
        name = "id__tiny-skia-0.11.4",
        sha256 = "83d13394d44dae3207b52a326c0c85a8bf87f1541f23b0d143811088497b09ab",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tiny-skia/0.11.4/download"],
        strip_prefix = "tiny-skia-0.11.4",
        build_file = Label("//3rdparty/crates:BUILD.tiny-skia-0.11.4.bazel"),
    )

    maybe(
        http_archive,
        name = "id__tiny-skia-path-0.11.4",
        sha256 = "9c9e7fc0c2e86a30b117d0462aa261b72b7a99b7ebd7deb3a14ceda95c5bdc93",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tiny-skia-path/0.11.4/download"],
        strip_prefix = "tiny-skia-path-0.11.4",
        build_file = Label("//3rdparty/crates:BUILD.tiny-skia-path-0.11.4.bazel"),
    )

    maybe(
        http_archive,
        name = "id__tinyvec-1.8.0",
        sha256 = "445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tinyvec/1.8.0/download"],
        strip_prefix = "tinyvec-1.8.0",
        build_file = Label("//3rdparty/crates:BUILD.tinyvec-1.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__tinyvec_macros-0.1.1",
        sha256 = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/tinyvec_macros/0.1.1/download"],
        strip_prefix = "tinyvec_macros-0.1.1",
        build_file = Label("//3rdparty/crates:BUILD.tinyvec_macros-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__ttf-parser-0.24.1",
        sha256 = "5be21190ff5d38e8b4a2d3b6a3ae57f612cc39c96e83cedeaf7abc338a8bac4a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/ttf-parser/0.24.1/download"],
        strip_prefix = "ttf-parser-0.24.1",
        build_file = Label("//3rdparty/crates:BUILD.ttf-parser-0.24.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicode-bidi-0.3.15",
        sha256 = "08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-bidi/0.3.15/download"],
        strip_prefix = "unicode-bidi-0.3.15",
        build_file = Label("//3rdparty/crates:BUILD.unicode-bidi-0.3.15.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicode-bidi-mirroring-0.3.0",
        sha256 = "64af057ad7466495ca113126be61838d8af947f41d93a949980b2389a118082f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-bidi-mirroring/0.3.0/download"],
        strip_prefix = "unicode-bidi-mirroring-0.3.0",
        build_file = Label("//3rdparty/crates:BUILD.unicode-bidi-mirroring-0.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicode-ccc-0.3.0",
        sha256 = "260bc6647b3893a9a90668360803a15f96b85a5257b1c3a0c3daf6ae2496de42",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-ccc/0.3.0/download"],
        strip_prefix = "unicode-ccc-0.3.0",
        build_file = Label("//3rdparty/crates:BUILD.unicode-ccc-0.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicode-ident-1.0.13",
        sha256 = "e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-ident/1.0.13/download"],
        strip_prefix = "unicode-ident-1.0.13",
        build_file = Label("//3rdparty/crates:BUILD.unicode-ident-1.0.13.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicode-properties-0.1.2",
        sha256 = "52ea75f83c0137a9b98608359a5f1af8144876eb67bcb1ce837368e906a9f524",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-properties/0.1.2/download"],
        strip_prefix = "unicode-properties-0.1.2",
        build_file = Label("//3rdparty/crates:BUILD.unicode-properties-0.1.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicode-script-0.5.7",
        sha256 = "9fb421b350c9aff471779e262955939f565ec18b86c15364e6bdf0d662ca7c1f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-script/0.5.7/download"],
        strip_prefix = "unicode-script-0.5.7",
        build_file = Label("//3rdparty/crates:BUILD.unicode-script-0.5.7.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicode-vo-0.1.0",
        sha256 = "b1d386ff53b415b7fe27b50bb44679e2cc4660272694b7b6f3326d8480823a94",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-vo/0.1.0/download"],
        strip_prefix = "unicode-vo-0.1.0",
        build_file = Label("//3rdparty/crates:BUILD.unicode-vo-0.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__usvg-0.43.0",
        sha256 = "6803057b5cbb426e9fb8ce2216f3a9b4ca1dd2c705ba3cbebc13006e437735fd",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/usvg/0.43.0/download"],
        strip_prefix = "usvg-0.43.0",
        build_file = Label("//3rdparty/crates:BUILD.usvg-0.43.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__utf8parse-0.2.2",
        sha256 = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/utf8parse/0.2.2/download"],
        strip_prefix = "utf8parse-0.2.2",
        build_file = Label("//3rdparty/crates:BUILD.utf8parse-0.2.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__version_check-0.9.5",
        sha256 = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/version_check/0.9.5/download"],
        strip_prefix = "version_check-0.9.5",
        build_file = Label("//3rdparty/crates:BUILD.version_check-0.9.5.bazel"),
    )

    maybe(
        http_archive,
        name = "id__weezl-0.1.8",
        sha256 = "53a85b86a771b1c87058196170769dd264f66c0782acf1ae6cc51bfd64b39082",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/weezl/0.1.8/download"],
        strip_prefix = "weezl-0.1.8",
        build_file = Label("//3rdparty/crates:BUILD.weezl-0.1.8.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows-sys-0.52.0",
        sha256 = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows-sys/0.52.0/download"],
        strip_prefix = "windows-sys-0.52.0",
        build_file = Label("//3rdparty/crates:BUILD.windows-sys-0.52.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows-targets-0.52.6",
        sha256 = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows-targets/0.52.6/download"],
        strip_prefix = "windows-targets-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows-targets-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_aarch64_gnullvm-0.52.6",
        sha256 = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_aarch64_gnullvm/0.52.6/download"],
        strip_prefix = "windows_aarch64_gnullvm-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows_aarch64_gnullvm-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_aarch64_msvc-0.52.6",
        sha256 = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_aarch64_msvc/0.52.6/download"],
        strip_prefix = "windows_aarch64_msvc-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows_aarch64_msvc-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_i686_gnu-0.52.6",
        sha256 = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_gnu/0.52.6/download"],
        strip_prefix = "windows_i686_gnu-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows_i686_gnu-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_i686_gnullvm-0.52.6",
        sha256 = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_gnullvm/0.52.6/download"],
        strip_prefix = "windows_i686_gnullvm-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows_i686_gnullvm-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_i686_msvc-0.52.6",
        sha256 = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_msvc/0.52.6/download"],
        strip_prefix = "windows_i686_msvc-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows_i686_msvc-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_x86_64_gnu-0.52.6",
        sha256 = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_gnu/0.52.6/download"],
        strip_prefix = "windows_x86_64_gnu-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows_x86_64_gnu-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_x86_64_gnullvm-0.52.6",
        sha256 = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_gnullvm/0.52.6/download"],
        strip_prefix = "windows_x86_64_gnullvm-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows_x86_64_gnullvm-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_x86_64_msvc-0.52.6",
        sha256 = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_msvc/0.52.6/download"],
        strip_prefix = "windows_x86_64_msvc-0.52.6",
        build_file = Label("//3rdparty/crates:BUILD.windows_x86_64_msvc-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__xmlwriter-0.1.0",
        sha256 = "ec7a2a501ed189703dba8b08142f057e887dfc4b2cc4db2d343ac6376ba3e0b9",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/xmlwriter/0.1.0/download"],
        strip_prefix = "xmlwriter-0.1.0",
        build_file = Label("//3rdparty/crates:BUILD.xmlwriter-0.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__zune-core-0.4.12",
        sha256 = "3f423a2c17029964870cfaabb1f13dfab7d092a62a29a89264f4d36990ca414a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/zune-core/0.4.12/download"],
        strip_prefix = "zune-core-0.4.12",
        build_file = Label("//3rdparty/crates:BUILD.zune-core-0.4.12.bazel"),
    )

    maybe(
        http_archive,
        name = "id__zune-jpeg-0.4.13",
        sha256 = "16099418600b4d8f028622f73ff6e3deaabdff330fb9a2a131dea781ee8b0768",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/zune-jpeg/0.4.13/download"],
        strip_prefix = "zune-jpeg-0.4.13",
        build_file = Label("//3rdparty/crates:BUILD.zune-jpeg-0.4.13.bazel"),
    )

    return [
        struct(repo = "id__clap-4.5.17", is_dev_dep = False),
        struct(repo = "id__resvg-0.43.0", is_dev_dep = False),
    ]
